{"version":3,"file":"static/js/24.446162a1.chunk.js","mappings":"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","sources":["components/user-pages/Login.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { Link, Redirect, useHistory } from 'react-router-dom';\nimport { Form } from 'react-bootstrap';\nimport { Formik, Field } from 'formik';\nimport * as Yup from \"yup\";\nimport AxiosUser from \"../shared/AxiosUser\";\nimport Swal from 'sweetalert2';\nimport axios from 'axios';\n\nconst initialValues = {\n  email: \"\",\n  password: \"\"\n};\nconst validateForm = Yup.object().shape({\n  email: Yup.string().email().required(\"Please enter valid email address\"),\n  password: Yup.string().required(\"Please enter password\")\n});\n\nexport default function Login() {\n\n  const [ip, setIp] = useState([]);\n\n  const history = useHistory();\n\n  const handleSubmit = (values) => {\n    const postData = {\n      \"email\": values.email,\n      \"password\": values.password,\n      \"ipaddress\": \"10.252.252.10\"\n    }\n    AxiosUser({\n      method: \"POST\",\n      url: `/user-management/adminlogin`,\n      data: JSON.stringify(postData),\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    })\n      .then(res => {\n        if(res.data.userid){\n          sessionStorage.setItem(\"userToken\", res.data.sessionId);\n          sessionStorage.setItem(\"userId\", res.data.userid);\n          sessionStorage.setItem(\"user\",JSON.stringify(res.data));\n           history.push(\"/dashboard\");\n         // window.location.reload(true)\n        } else {\n          Swal.fire({\n            title: 'Oops!',\n            text: 'Invalid login, please try again.',\n            icon: 'error',\n          })\n        }\n      })\n      .catch(err => {\n        console.log(\"Err\");\n        Swal.fire({\n          title: 'Oops!',\n          text: 'Invalid login, please try again.',\n          icon: 'error',\n        })\n      });\n  }\n\n  const getData = () => {\n    const res = axios.get(\"https://api.ipify.org/?format=json\").then(res => {\n      setIp(res.data.ip);\n    });\n    \n  };\n\n  useEffect(()=>{\n   // getData()\n    const userToken = sessionStorage.getItem(\"userToken\");\n    console.log(\"userToken\", userToken);\n    if(userToken){\n       history.push(\"/dashboard\");\n    }\n\n  },[])\n\n  return (\n    <>\n    <div className=\"login-body-admin\">\n      <div className=\"d-flex align-items-center auth px-0\">\n        <div className=\"row w-100 mx-0\">\n\n            <div className=\"col-lg-4 mx-auto\">\n              <div className=\"card text-left py-5 px-5 px-sm-5\">\n                <div className=\"brand-logo text-center\">\n                  <img src={require(\"../../assets/images/logo.png\")} alt=\"logo\" />\n                </div>\n                  <Formik\n                    initialValues={initialValues}\n                    validationSchema={validateForm}\n                    onSubmit={handleSubmit}\n                  >\n                    {({ values, errors, setFieldValue, setFieldError, touched, isValid, handleSubmit, submitForm }) => {\n                      return (\n                        <Form>\n                          <h4 className=\"text-center\">Hello! let's get started</h4>\n                          <h6 class=\"font-weight-light text-center\">Sign in to continue.</h6>\n                          <div className=\"search-field form-group\">\n                            <Field\n                              name=\"email\"\n                              type=\"text\"\n                              className={`h-auto form-control form-control-lg ${touched.email && errors.email ? \"is-invalid\" : \"\"}`}\n                              placeholder=\"Email Address\"\n                              onChange={event => {\n                                setFieldValue(\"email\", event.target.value);\n                              }}\n                            />\n                            {touched.email && errors.email && (<p className=\"error\">{errors.email}</p>)}\n                          </div>\n                          <div className=\"search-field form-group\">\n                            <Field\n                              name=\"password\"\n                              type=\"password\"\n                              className={`h-auto form-control form-control-lg ${touched.password && errors.password ? \"is-invalid\" : \"\"}`}\n                              placeholder=\"Password\"\n                              onChange={event => {\n                                setFieldValue(\"password\", event.target.value);\n                              }}\n                            />\n                            {touched.password && errors.password && (<p className=\"error\">{errors.password}</p>)}\n                          </div>\n                          \n                          <div className=\"custom-control custom-checkbox\">\n                            <input\n                              type=\"checkbox\"\n                              className=\"custom-control-input\"\n                              id=\"form-checkbox\"\n                            />\n                            <label className=\"custom-control-label\" htmlFor=\"form-checkbox\">\n                              Remember me\n                            </label>\n                          </div>\n                          <button type=\"submit\" onClick={(event) => {\n                            event.preventDefault();\n                            handleSubmit();\n                          }} className=\"btn btn-block btn-primary btn-lg font-weight-medium auth-form-btn mt-3\">Sign In</button>\n                        </Form>\n                      )\n                    }\n                    }\n                  </Formik>\n                  \n              </div>\n            </div>\n\n        </div>\n      </div>\n      </div>\n    </>\n  );\n}\n"],"names":["initialValues","email","password","validateForm","Yup","shape","required","Login","_useState","useState","_useState2","_slicedToArray","history","useHistory","useEffect","userToken","sessionStorage","getItem","console","log","push","_jsx","_Fragment","children","className","_jsxs","src","require","alt","Formik","validationSchema","onSubmit","values","postData","AxiosUser","method","url","data","JSON","stringify","headers","then","res","userid","setItem","sessionId","Swal","title","text","icon","catch","err","_ref","errors","setFieldValue","touched","setFieldError","handleSubmit","isValid","submitForm","Form","class","Field","name","type","concat","placeholder","onChange","event","target","value","id","htmlFor","onClick","preventDefault"],"sourceRoot":""}